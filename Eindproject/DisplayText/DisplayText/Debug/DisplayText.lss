
DisplayText.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  000009b8  00000a4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002c4  008002c4  00000c10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001195  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1d  00000000  00000000  00001ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088c  00000000  00000000  000029f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00003284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006df  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000412f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5f c0       	rjmp	.+190    	; 0xc0 <__ctors_end>
   2:	00 00       	nop
   4:	7a c0       	rjmp	.+244    	; 0xfa <__bad_interrupt>
   6:	00 00       	nop
   8:	78 c0       	rjmp	.+240    	; 0xfa <__bad_interrupt>
   a:	00 00       	nop
   c:	76 c0       	rjmp	.+236    	; 0xfa <__bad_interrupt>
   e:	00 00       	nop
  10:	74 c0       	rjmp	.+232    	; 0xfa <__bad_interrupt>
  12:	00 00       	nop
  14:	72 c0       	rjmp	.+228    	; 0xfa <__bad_interrupt>
  16:	00 00       	nop
  18:	70 c0       	rjmp	.+224    	; 0xfa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6e c0       	rjmp	.+220    	; 0xfa <__bad_interrupt>
  1e:	00 00       	nop
  20:	6c c0       	rjmp	.+216    	; 0xfa <__bad_interrupt>
  22:	00 00       	nop
  24:	6a c0       	rjmp	.+212    	; 0xfa <__bad_interrupt>
  26:	00 00       	nop
  28:	68 c0       	rjmp	.+208    	; 0xfa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	66 c0       	rjmp	.+204    	; 0xfa <__bad_interrupt>
  2e:	00 00       	nop
  30:	64 c0       	rjmp	.+200    	; 0xfa <__bad_interrupt>
  32:	00 00       	nop
  34:	62 c0       	rjmp	.+196    	; 0xfa <__bad_interrupt>
  36:	00 00       	nop
  38:	60 c0       	rjmp	.+192    	; 0xfa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5e c0       	rjmp	.+188    	; 0xfa <__bad_interrupt>
  3e:	00 00       	nop
  40:	5c c0       	rjmp	.+184    	; 0xfa <__bad_interrupt>
  42:	00 00       	nop
  44:	5a c0       	rjmp	.+180    	; 0xfa <__bad_interrupt>
  46:	00 00       	nop
  48:	58 c0       	rjmp	.+176    	; 0xfa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	56 c0       	rjmp	.+172    	; 0xfa <__bad_interrupt>
  4e:	00 00       	nop
  50:	54 c0       	rjmp	.+168    	; 0xfa <__bad_interrupt>
  52:	00 00       	nop
  54:	52 c0       	rjmp	.+164    	; 0xfa <__bad_interrupt>
  56:	00 00       	nop
  58:	50 c0       	rjmp	.+160    	; 0xfa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4e c0       	rjmp	.+156    	; 0xfa <__bad_interrupt>
  5e:	00 00       	nop
  60:	4c c0       	rjmp	.+152    	; 0xfa <__bad_interrupt>
  62:	00 00       	nop
  64:	4a c0       	rjmp	.+148    	; 0xfa <__bad_interrupt>
  66:	00 00       	nop
  68:	48 c0       	rjmp	.+144    	; 0xfa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	46 c0       	rjmp	.+140    	; 0xfa <__bad_interrupt>
  6e:	00 00       	nop
  70:	44 c0       	rjmp	.+136    	; 0xfa <__bad_interrupt>
  72:	00 00       	nop
  74:	42 c0       	rjmp	.+132    	; 0xfa <__bad_interrupt>
  76:	00 00       	nop
  78:	40 c0       	rjmp	.+128    	; 0xfa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3e c0       	rjmp	.+124    	; 0xfa <__bad_interrupt>
  7e:	00 00       	nop
  80:	3c c0       	rjmp	.+120    	; 0xfa <__bad_interrupt>
  82:	00 00       	nop
  84:	3a c0       	rjmp	.+116    	; 0xfa <__bad_interrupt>
  86:	00 00       	nop
  88:	38 c0       	rjmp	.+112    	; 0xfa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	23 02       	muls	r18, r19
  8e:	2c 02       	muls	r18, r28
  90:	35 02       	muls	r19, r21
  92:	3e 02       	muls	r19, r30
  94:	47 02       	muls	r20, r23
  96:	51 02       	muls	r21, r17
  98:	5b 02       	muls	r21, r27
  9a:	65 02       	muls	r22, r21
  9c:	6f 02       	muls	r22, r31
  9e:	79 02       	muls	r23, r25
  a0:	83 02       	muls	r24, r19
  a2:	8d 02       	muls	r24, r29
  a4:	97 02       	muls	r25, r23
  a6:	a1 02       	muls	r26, r17
  a8:	ab 02       	muls	r26, r27
  aa:	b5 02       	muls	r27, r21
  ac:	bf 02       	muls	r27, r31
  ae:	c9 02       	muls	r28, r25
  b0:	d3 02       	muls	r29, r19
  b2:	dd 02       	muls	r29, r29
  b4:	e7 02       	muls	r30, r23
  b6:	f1 02       	muls	r31, r17
  b8:	fb 02       	muls	r31, r27
  ba:	05 03       	mulsu	r16, r21
  bc:	0f 03       	fmul	r16, r23
  be:	19 03       	fmul	r17, r17

000000c0 <__ctors_end>:
  c0:	11 24       	eor	r1, r1
  c2:	1f be       	out	0x3f, r1	; 63
  c4:	cf ef       	ldi	r28, 0xFF	; 255
  c6:	d0 e1       	ldi	r29, 0x10	; 16
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
  cc:	12 e0       	ldi	r17, 0x02	; 2
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b1 e0       	ldi	r27, 0x01	; 1
  d2:	e8 eb       	ldi	r30, 0xB8	; 184
  d4:	f9 e0       	ldi	r31, 0x09	; 9
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	0b bf       	out	0x3b, r16	; 59
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
  dc:	07 90       	elpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a4 3c       	cpi	r26, 0xC4	; 196
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
  e6:	22 e0       	ldi	r18, 0x02	; 2
  e8:	a4 ec       	ldi	r26, 0xC4	; 196
  ea:	b2 e0       	ldi	r27, 0x02	; 2
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	aa 3d       	cpi	r26, 0xDA	; 218
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
  f6:	2a d3       	rcall	.+1620   	; 0x74c <main>
  f8:	5d c4       	rjmp	.+2234   	; 0x9b4 <_exit>

000000fa <__bad_interrupt>:
  fa:	82 cf       	rjmp	.-252    	; 0x0 <__vectors>

000000fc <upOffset>:

int board[8];
int offset = 0;

void upOffset(){
	offset++;
  fc:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
 100:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__data_end+0x1>
 104:	01 96       	adiw	r24, 0x01	; 1
	if(offset > 135){
 106:	88 38       	cpi	r24, 0x88	; 136
 108:	91 05       	cpc	r25, r1
 10a:	2c f4       	brge	.+10     	; 0x116 <upOffset+0x1a>

int board[8];
int offset = 0;

void upOffset(){
	offset++;
 10c:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <__data_end+0x1>
 110:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
 114:	08 95       	ret
	if(offset > 135){
		offset = 0;
 116:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <__data_end+0x1>
 11a:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
 11e:	08 95       	ret

00000120 <write_board_data>:
	}
	write_board_data_w();
 }

 void write_board_data(int* text)
 {
 120:	df 92       	push	r13
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8c 01       	movw	r16, r24
	 char columnValue = 0;
	 int value = 8;
 130:	c8 e0       	ldi	r28, 0x08	; 8
 132:	d0 e0       	ldi	r29, 0x00	; 0
	 for(int row = 0; row < 8; row++)
	 {
		 columnValue = text[value + offset];
		 write_data(getRowAdress(row),columnValue);
 134:	68 94       	set
 136:	ee 24       	eor	r14, r14
 138:	e3 f8       	bld	r14, 3
 13a:	f1 2c       	mov	r15, r1
 {
	 char columnValue = 0;
	 int value = 8;
	 for(int row = 0; row < 8; row++)
	 {
		 columnValue = text[value + offset];
 13c:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <__data_end>
 140:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <__data_end+0x1>
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	e0 0f       	add	r30, r16
 14e:	f1 1f       	adc	r31, r17
 150:	d0 80       	ld	r13, Z
		 write_data(getRowAdress(row),columnValue);
 152:	c7 01       	movw	r24, r14
 154:	8c 1b       	sub	r24, r28
 156:	9d 0b       	sbc	r25, r29
 158:	8b d2       	rcall	.+1302   	; 0x670 <getRowAdress>
 15a:	6d 2d       	mov	r22, r13
 15c:	c9 d2       	rcall	.+1426   	; 0x6f0 <write_data>
		 value--;
 15e:	21 97       	sbiw	r28, 0x01	; 1

 void write_board_data(int* text)
 {
	 char columnValue = 0;
	 int value = 8;
	 for(int row = 0; row < 8; row++)
 160:	69 f7       	brne	.-38     	; 0x13c <write_board_data+0x1c>
	 {
		 columnValue = text[value + offset];
		 write_data(getRowAdress(row),columnValue);
		 value--;
	 }
 }
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	df 90       	pop	r13
 170:	08 95       	ret

00000172 <write_board_data_w>:

 void write_board_data_w()
 {
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
	 char columnValue = 0;
	 int value = 8;
 17c:	c8 e0       	ldi	r28, 0x08	; 8
 17e:	d0 e0       	ldi	r29, 0x00	; 0
	 for(int row = 0; row < 8; row++)
	 {
		 columnValue = board[value + offset];
		 write_data(getRowAdress(row),columnValue);
 180:	08 e0       	ldi	r16, 0x08	; 8
 182:	10 e0       	ldi	r17, 0x00	; 0
 {
	 char columnValue = 0;
	 int value = 8;
	 for(int row = 0; row < 8; row++)
	 {
		 columnValue = board[value + offset];
 184:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <__data_end>
 188:	f0 91 c5 02 	lds	r31, 0x02C5	; 0x8002c5 <__data_end+0x1>
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	ea 53       	subi	r30, 0x3A	; 58
 196:	fd 4f       	sbci	r31, 0xFD	; 253
 198:	f0 80       	ld	r15, Z
		 write_data(getRowAdress(row),columnValue);
 19a:	c8 01       	movw	r24, r16
 19c:	8c 1b       	sub	r24, r28
 19e:	9d 0b       	sbc	r25, r29
 1a0:	67 d2       	rcall	.+1230   	; 0x670 <getRowAdress>
 1a2:	6f 2d       	mov	r22, r15
 1a4:	a5 d2       	rcall	.+1354   	; 0x6f0 <write_data>
		 value--;
 1a6:	21 97       	sbiw	r28, 0x01	; 1

 void write_board_data_w()
 {
	 char columnValue = 0;
	 int value = 8;
	 for(int row = 0; row < 8; row++)
 1a8:	69 f7       	brne	.-38     	; 0x184 <write_board_data_w+0x12>
	 {
		 columnValue = board[value + offset];
		 write_data(getRowAdress(row),columnValue);
		 value--;
	 }
 }
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	08 95       	ret

000001b6 <clearBoard>:
 {
	clearBoard();
 }

 void clearBoard(void)
 {
 1b6:	e6 ec       	ldi	r30, 0xC6	; 198
 1b8:	f2 e0       	ldi	r31, 0x02	; 2
 1ba:	86 ed       	ldi	r24, 0xD6	; 214
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	11 92       	st	Z+, r1
 1c0:	11 92       	st	Z+, r1
	for(int row = 0; row < 8; row++)
 1c2:	8e 17       	cp	r24, r30
 1c4:	9f 07       	cpc	r25, r31
 1c6:	d9 f7       	brne	.-10     	; 0x1be <clearBoard+0x8>
		for(int column = 0; column < 8; column++)
		{
			board[row] = 0;
		}
	}
	write_board_data_w();
 1c8:	d4 cf       	rjmp	.-88     	; 0x172 <write_board_data_w>
 1ca:	08 95       	ret

000001cc <initBoard>:
	}
}

 void initBoard(void)
 {
	clearBoard();
 1cc:	f4 cf       	rjmp	.-24     	; 0x1b6 <clearBoard>
 1ce:	08 95       	ret

000001d0 <show_text>:
		 write_data(getRowAdress(row),columnValue);
		 value--;
	 }
 }
 
 void show_text(){
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	c6 5b       	subi	r28, 0xB6	; 182
 1de:	d1 40       	sbci	r29, 0x01	; 1
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
	 int* text = malloc((2 * 8) * sizeof(int));
 1ea:	80 e2       	ldi	r24, 0x20	; 32
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	c1 d2       	rcall	.+1410   	; 0x772 <malloc>
 1f0:	8c 01       	movw	r16, r24
	 
	 int letterA[8] = {0,0,0b00111111,0b10000100,0b10000100,0b10000100,0b00111111,0};
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	ee e0       	ldi	r30, 0x0E	; 14
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	de 01       	movw	r26, r28
 1fa:	11 96       	adiw	r26, 0x01	; 1
 1fc:	01 90       	ld	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	8a 95       	dec	r24
 202:	e1 f7       	brne	.-8      	; 0x1fc <show_text+0x2c>
	 int letterB[8] = {0,0,0b10111111,0b10100100,0b10100100,0b10100100,0b00011011,0};
 204:	80 e1       	ldi	r24, 0x10	; 16
 206:	ee e1       	ldi	r30, 0x1E	; 30
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	de 01       	movw	r26, r28
 20c:	51 96       	adiw	r26, 0x11	; 17
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	8a 95       	dec	r24
 214:	e1 f7       	brne	.-8      	; 0x20e <show_text+0x3e>
	 int letterC[8] = {0x00, 0x1e, 0x21, 0x21, 0x21, 0x21, 0x00, 0x00};
 216:	80 e1       	ldi	r24, 0x10	; 16
 218:	ee e2       	ldi	r30, 0x2E	; 46
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	de 01       	movw	r26, r28
 21e:	91 96       	adiw	r26, 0x21	; 33
 220:	01 90       	ld	r0, Z+
 222:	0d 92       	st	X+, r0
 224:	8a 95       	dec	r24
 226:	e1 f7       	brne	.-8      	; 0x220 <show_text+0x50>
	 int letterD[8] = {0x00, 0x3f, 0x21, 0x21, 0x21, 0x1e, 0x00, 0x00};
 228:	80 e1       	ldi	r24, 0x10	; 16
 22a:	ee e3       	ldi	r30, 0x3E	; 62
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	de 01       	movw	r26, r28
 230:	d1 96       	adiw	r26, 0x31	; 49
 232:	01 90       	ld	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	8a 95       	dec	r24
 238:	e1 f7       	brne	.-8      	; 0x232 <show_text+0x62>
	 int letterE[8] = {0x00, 0x3f, 0x25, 0x25, 0x21, 0x21, 0x00, 0x00};
 23a:	80 e1       	ldi	r24, 0x10	; 16
 23c:	ee e4       	ldi	r30, 0x4E	; 78
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	de 01       	movw	r26, r28
 242:	af 5b       	subi	r26, 0xBF	; 191
 244:	bf 4f       	sbci	r27, 0xFF	; 255
 246:	01 90       	ld	r0, Z+
 248:	0d 92       	st	X+, r0
 24a:	8a 95       	dec	r24
 24c:	e1 f7       	brne	.-8      	; 0x246 <show_text+0x76>
	 int letterF[8] = {0x00, 0x3f, 0x05, 0x05, 0x05, 0x01, 0x00, 0x00};
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	ee e5       	ldi	r30, 0x5E	; 94
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	de 01       	movw	r26, r28
 256:	af 5a       	subi	r26, 0xAF	; 175
 258:	bf 4f       	sbci	r27, 0xFF	; 255
 25a:	01 90       	ld	r0, Z+
 25c:	0d 92       	st	X+, r0
 25e:	8a 95       	dec	r24
 260:	e1 f7       	brne	.-8      	; 0x25a <show_text+0x8a>
	 int letterG[8] = {0x00, 0x3f, 0x21, 0x25, 0x25, 0x3d, 0x00, 0x00};
 262:	80 e1       	ldi	r24, 0x10	; 16
 264:	ee e6       	ldi	r30, 0x6E	; 110
 266:	f1 e0       	ldi	r31, 0x01	; 1
 268:	de 01       	movw	r26, r28
 26a:	af 59       	subi	r26, 0x9F	; 159
 26c:	bf 4f       	sbci	r27, 0xFF	; 255
 26e:	01 90       	ld	r0, Z+
 270:	0d 92       	st	X+, r0
 272:	8a 95       	dec	r24
 274:	e1 f7       	brne	.-8      	; 0x26e <show_text+0x9e>
	 int letterH[8] = {0x00, 0x3f, 0x04, 0x04, 0x04, 0x3f, 0x00, 0x00};
 276:	80 e1       	ldi	r24, 0x10	; 16
 278:	ee e7       	ldi	r30, 0x7E	; 126
 27a:	f1 e0       	ldi	r31, 0x01	; 1
 27c:	de 01       	movw	r26, r28
 27e:	af 58       	subi	r26, 0x8F	; 143
 280:	bf 4f       	sbci	r27, 0xFF	; 255
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	8a 95       	dec	r24
 288:	e1 f7       	brne	.-8      	; 0x282 <show_text+0xb2>
	 int letterI[8] = {0x00, 0x21, 0x21, 0x3f, 0x21, 0x21, 0x00, 0x00};
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	ee e8       	ldi	r30, 0x8E	; 142
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	de 01       	movw	r26, r28
 292:	af 57       	subi	r26, 0x7F	; 127
 294:	bf 4f       	sbci	r27, 0xFF	; 255
 296:	01 90       	ld	r0, Z+
 298:	0d 92       	st	X+, r0
 29a:	8a 95       	dec	r24
 29c:	e1 f7       	brne	.-8      	; 0x296 <show_text+0xc6>
	 int letterJ[8] = {0x00, 0x00, 0x31, 0x21, 0x21, 0x3f, 0x00, 0x00};
 29e:	80 e1       	ldi	r24, 0x10	; 16
 2a0:	ee e9       	ldi	r30, 0x9E	; 158
 2a2:	f1 e0       	ldi	r31, 0x01	; 1
 2a4:	de 01       	movw	r26, r28
 2a6:	af 56       	subi	r26, 0x6F	; 111
 2a8:	bf 4f       	sbci	r27, 0xFF	; 255
 2aa:	01 90       	ld	r0, Z+
 2ac:	0d 92       	st	X+, r0
 2ae:	8a 95       	dec	r24
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <show_text+0xda>
	 int letterK[8] = {0x00, 0x3f, 0x04, 0x0a, 0x31, 0x00, 0x00, 0x00};
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	ee ea       	ldi	r30, 0xAE	; 174
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	de 01       	movw	r26, r28
 2ba:	af 55       	subi	r26, 0x5F	; 95
 2bc:	bf 4f       	sbci	r27, 0xFF	; 255
 2be:	01 90       	ld	r0, Z+
 2c0:	0d 92       	st	X+, r0
 2c2:	8a 95       	dec	r24
 2c4:	e1 f7       	brne	.-8      	; 0x2be <show_text+0xee>
	 int letterL[8] = {0x00, 0x3f, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00};
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	ee eb       	ldi	r30, 0xBE	; 190
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	de 01       	movw	r26, r28
 2ce:	af 54       	subi	r26, 0x4F	; 79
 2d0:	bf 4f       	sbci	r27, 0xFF	; 255
 2d2:	01 90       	ld	r0, Z+
 2d4:	0d 92       	st	X+, r0
 2d6:	8a 95       	dec	r24
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <show_text+0x102>
	 int letterM[8] = {0x00, 0x3f, 0x01, 0x07, 0x01, 0x3f, 0x00, 0x00};
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	ee ec       	ldi	r30, 0xCE	; 206
 2de:	f1 e0       	ldi	r31, 0x01	; 1
 2e0:	de 01       	movw	r26, r28
 2e2:	af 53       	subi	r26, 0x3F	; 63
 2e4:	bf 4f       	sbci	r27, 0xFF	; 255
 2e6:	01 90       	ld	r0, Z+
 2e8:	0d 92       	st	X+, r0
 2ea:	8a 95       	dec	r24
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <show_text+0x116>
	 int letterN[8] = {0x00, 0x3f, 0x02, 0x04, 0x08, 0x3f, 0x00, 0x00};
 2ee:	80 e1       	ldi	r24, 0x10	; 16
 2f0:	ee ed       	ldi	r30, 0xDE	; 222
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	de 01       	movw	r26, r28
 2f6:	af 52       	subi	r26, 0x2F	; 47
 2f8:	bf 4f       	sbci	r27, 0xFF	; 255
 2fa:	01 90       	ld	r0, Z+
 2fc:	0d 92       	st	X+, r0
 2fe:	8a 95       	dec	r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <show_text+0x12a>
	 int letterO[8] = {0x00, 0x3f, 0x21, 0x21, 0x21, 0x3f, 0x00, 0x00};
 302:	80 e1       	ldi	r24, 0x10	; 16
 304:	ee ee       	ldi	r30, 0xEE	; 238
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	de 01       	movw	r26, r28
 30a:	af 51       	subi	r26, 0x1F	; 31
 30c:	bf 4f       	sbci	r27, 0xFF	; 255
 30e:	01 90       	ld	r0, Z+
 310:	0d 92       	st	X+, r0
 312:	8a 95       	dec	r24
 314:	e1 f7       	brne	.-8      	; 0x30e <show_text+0x13e>
	 int letterP[8] = {0x00, 0x3f, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00};
 316:	80 e1       	ldi	r24, 0x10	; 16
 318:	ee ef       	ldi	r30, 0xFE	; 254
 31a:	f1 e0       	ldi	r31, 0x01	; 1
 31c:	de 01       	movw	r26, r28
 31e:	af 50       	subi	r26, 0x0F	; 15
 320:	bf 4f       	sbci	r27, 0xFF	; 255
 322:	01 90       	ld	r0, Z+
 324:	0d 92       	st	X+, r0
 326:	8a 95       	dec	r24
 328:	e1 f7       	brne	.-8      	; 0x322 <show_text+0x152>
	 int letterQ[8] = {0x00, 0x06, 0x09, 0x09, 0x09, 0x3f, 0x00, 0x00};
 32a:	80 e1       	ldi	r24, 0x10	; 16
 32c:	ee e0       	ldi	r30, 0x0E	; 14
 32e:	f2 e0       	ldi	r31, 0x02	; 2
 330:	de 01       	movw	r26, r28
 332:	af 5f       	subi	r26, 0xFF	; 255
 334:	be 4f       	sbci	r27, 0xFE	; 254
 336:	01 90       	ld	r0, Z+
 338:	0d 92       	st	X+, r0
 33a:	8a 95       	dec	r24
 33c:	e1 f7       	brne	.-8      	; 0x336 <show_text+0x166>
	 int letterR[8] = {0x00, 0x3f, 0x09, 0x19, 0x29, 0x06, 0x00, 0x00};
 33e:	80 e1       	ldi	r24, 0x10	; 16
 340:	ee e1       	ldi	r30, 0x1E	; 30
 342:	f2 e0       	ldi	r31, 0x02	; 2
 344:	de 01       	movw	r26, r28
 346:	af 5e       	subi	r26, 0xEF	; 239
 348:	be 4f       	sbci	r27, 0xFE	; 254
 34a:	01 90       	ld	r0, Z+
 34c:	0d 92       	st	X+, r0
 34e:	8a 95       	dec	r24
 350:	e1 f7       	brne	.-8      	; 0x34a <show_text+0x17a>
	 int letterS[8] = {0x00, 0x16, 0x25, 0x25, 0x29, 0x1a, 0x00, 0x00};
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	ee e2       	ldi	r30, 0x2E	; 46
 356:	f2 e0       	ldi	r31, 0x02	; 2
 358:	de 01       	movw	r26, r28
 35a:	af 5d       	subi	r26, 0xDF	; 223
 35c:	be 4f       	sbci	r27, 0xFE	; 254
 35e:	01 90       	ld	r0, Z+
 360:	0d 92       	st	X+, r0
 362:	8a 95       	dec	r24
 364:	e1 f7       	brne	.-8      	; 0x35e <show_text+0x18e>
	 int letterT[8] = {0x00, 0x00, 0x01, 0x01, 0x1f, 0x01, 0x01, 0x00};
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	ee e3       	ldi	r30, 0x3E	; 62
 36a:	f2 e0       	ldi	r31, 0x02	; 2
 36c:	de 01       	movw	r26, r28
 36e:	af 5c       	subi	r26, 0xCF	; 207
 370:	be 4f       	sbci	r27, 0xFE	; 254
 372:	01 90       	ld	r0, Z+
 374:	0d 92       	st	X+, r0
 376:	8a 95       	dec	r24
 378:	e1 f7       	brne	.-8      	; 0x372 <show_text+0x1a2>
	 int letterU[8] = {0x00, 0x00, 0x0f, 0x10, 0x10, 0x08, 0x1f, 0x00};
 37a:	80 e1       	ldi	r24, 0x10	; 16
 37c:	ee e4       	ldi	r30, 0x4E	; 78
 37e:	f2 e0       	ldi	r31, 0x02	; 2
 380:	de 01       	movw	r26, r28
 382:	af 5b       	subi	r26, 0xBF	; 191
 384:	be 4f       	sbci	r27, 0xFE	; 254
 386:	01 90       	ld	r0, Z+
 388:	0d 92       	st	X+, r0
 38a:	8a 95       	dec	r24
 38c:	e1 f7       	brne	.-8      	; 0x386 <show_text+0x1b6>
	 int letterV[8] = {0x00, 0x00, 0x07, 0x08, 0x10, 0x08, 0x07, 0x00};
 38e:	80 e1       	ldi	r24, 0x10	; 16
 390:	ee e5       	ldi	r30, 0x5E	; 94
 392:	f2 e0       	ldi	r31, 0x02	; 2
 394:	de 01       	movw	r26, r28
 396:	af 5a       	subi	r26, 0xAF	; 175
 398:	be 4f       	sbci	r27, 0xFE	; 254
 39a:	01 90       	ld	r0, Z+
 39c:	0d 92       	st	X+, r0
 39e:	8a 95       	dec	r24
 3a0:	e1 f7       	brne	.-8      	; 0x39a <show_text+0x1ca>
	 int letterW[8] = {0x00, 0x00, 0x0f, 0x10, 0x0c, 0x10, 0x0f, 0x00};
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	ee e6       	ldi	r30, 0x6E	; 110
 3a6:	f2 e0       	ldi	r31, 0x02	; 2
 3a8:	de 01       	movw	r26, r28
 3aa:	af 59       	subi	r26, 0x9F	; 159
 3ac:	be 4f       	sbci	r27, 0xFE	; 254
 3ae:	01 90       	ld	r0, Z+
 3b0:	0d 92       	st	X+, r0
 3b2:	8a 95       	dec	r24
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <show_text+0x1de>
	 int letterX[8] = {0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x00};
 3b6:	80 e1       	ldi	r24, 0x10	; 16
 3b8:	ee e7       	ldi	r30, 0x7E	; 126
 3ba:	f2 e0       	ldi	r31, 0x02	; 2
 3bc:	de 01       	movw	r26, r28
 3be:	af 58       	subi	r26, 0x8F	; 143
 3c0:	be 4f       	sbci	r27, 0xFE	; 254
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <show_text+0x1f2>
	 int letterY[8] = {0x00, 0x00, 0x22, 0x14, 0x08, 0x04, 0x02, 0x00};
 3ca:	80 e1       	ldi	r24, 0x10	; 16
 3cc:	ee e8       	ldi	r30, 0x8E	; 142
 3ce:	f2 e0       	ldi	r31, 0x02	; 2
 3d0:	de 01       	movw	r26, r28
 3d2:	af 57       	subi	r26, 0x7F	; 127
 3d4:	be 4f       	sbci	r27, 0xFE	; 254
 3d6:	01 90       	ld	r0, Z+
 3d8:	0d 92       	st	X+, r0
 3da:	8a 95       	dec	r24
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <show_text+0x206>
	 int letterZ[8] = {0x00, 0x41, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00};
 3de:	80 e1       	ldi	r24, 0x10	; 16
 3e0:	ee e9       	ldi	r30, 0x9E	; 158
 3e2:	f2 e0       	ldi	r31, 0x02	; 2
 3e4:	de 01       	movw	r26, r28
 3e6:	af 56       	subi	r26, 0x6F	; 111
 3e8:	be 4f       	sbci	r27, 0xFE	; 254
 3ea:	01 90       	ld	r0, Z+
 3ec:	0d 92       	st	X+, r0
 3ee:	8a 95       	dec	r24
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <show_text+0x21a>
	 
	 char string[22] = "nerdsarethenewcool";
 3f2:	83 e1       	ldi	r24, 0x13	; 19
 3f4:	ee ea       	ldi	r30, 0xAE	; 174
 3f6:	f2 e0       	ldi	r31, 0x02	; 2
 3f8:	de 01       	movw	r26, r28
 3fa:	af 55       	subi	r26, 0x5F	; 95
 3fc:	be 4f       	sbci	r27, 0xFE	; 254
 3fe:	01 90       	ld	r0, Z+
 400:	0d 92       	st	X+, r0
 402:	8a 95       	dec	r24
 404:	e1 f7       	brne	.-8      	; 0x3fe <show_text+0x22e>
 406:	e1 ea       	ldi	r30, 0xA1	; 161
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	ec 0f       	add	r30, r28
 40c:	fd 1f       	adc	r31, r29
 40e:	73 96       	adiw	r30, 0x13	; 19
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	df 01       	movw	r26, r30
 414:	1d 92       	st	X+, r1
 416:	8a 95       	dec	r24
 418:	e9 f7       	brne	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41a:	ae 01       	movw	r20, r28
 41c:	4f 55       	subi	r20, 0x5F	; 95
 41e:	5e 4f       	sbci	r21, 0xFE	; 254
 420:	98 01       	movw	r18, r16
 422:	b8 01       	movw	r22, r16
 424:	60 5a       	subi	r22, 0xA0	; 160
 426:	7e 4f       	sbci	r23, 0xFE	; 254
	 
	 for(int i = 0; i < 22; i++){
		 char character = string[i];
 428:	da 01       	movw	r26, r20
 42a:	ed 91       	ld	r30, X+
 42c:	ad 01       	movw	r20, r26
		 
		 switch(character){
 42e:	8e 2f       	mov	r24, r30
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	fc 01       	movw	r30, r24
 434:	e1 56       	subi	r30, 0x61	; 97
 436:	f1 09       	sbc	r31, r1
 438:	ea 31       	cpi	r30, 0x1A	; 26
 43a:	f1 05       	cpc	r31, r1
 43c:	08 f0       	brcs	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	02 c1       	rjmp	.+516    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 440:	ea 5b       	subi	r30, 0xBA	; 186
 442:	ff 4f       	sbci	r31, 0xFF	; 255
 444:	8d c1       	rjmp	.+794    	; 0x760 <__tablejump2__>
			 case 'a':
			 memcpy(text + (i * 8), letterA, 8 * sizeof(int));
 446:	80 e1       	ldi	r24, 0x10	; 16
 448:	fe 01       	movw	r30, r28
 44a:	31 96       	adiw	r30, 0x01	; 1
 44c:	d9 01       	movw	r26, r18
 44e:	01 90       	ld	r0, Z+
 450:	0d 92       	st	X+, r0
 452:	8a 95       	dec	r24
 454:	e1 f7       	brne	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			 break;
 456:	f6 c0       	rjmp	.+492    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'b':
			 memcpy(text + (i * 8), letterB, 8 * sizeof(int));
 458:	80 e1       	ldi	r24, 0x10	; 16
 45a:	fe 01       	movw	r30, r28
 45c:	71 96       	adiw	r30, 0x11	; 17
 45e:	d9 01       	movw	r26, r18
 460:	01 90       	ld	r0, Z+
 462:	0d 92       	st	X+, r0
 464:	8a 95       	dec	r24
 466:	e1 f7       	brne	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
			 break;
 468:	ed c0       	rjmp	.+474    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'c':
			 memcpy(text + (i * 8), letterC, 8 * sizeof(int));
 46a:	80 e1       	ldi	r24, 0x10	; 16
 46c:	fe 01       	movw	r30, r28
 46e:	b1 96       	adiw	r30, 0x21	; 33
 470:	d9 01       	movw	r26, r18
 472:	01 90       	ld	r0, Z+
 474:	0d 92       	st	X+, r0
 476:	8a 95       	dec	r24
 478:	e1 f7       	brne	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			 break;
 47a:	e4 c0       	rjmp	.+456    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'd':
			 memcpy(text + (i * 8), letterD, 8 * sizeof(int));
 47c:	80 e1       	ldi	r24, 0x10	; 16
 47e:	fe 01       	movw	r30, r28
 480:	f1 96       	adiw	r30, 0x31	; 49
 482:	d9 01       	movw	r26, r18
 484:	01 90       	ld	r0, Z+
 486:	0d 92       	st	X+, r0
 488:	8a 95       	dec	r24
 48a:	e1 f7       	brne	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			 break;
 48c:	db c0       	rjmp	.+438    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'e':
			 memcpy(text + (i * 8), letterE, 8 * sizeof(int));
 48e:	80 e1       	ldi	r24, 0x10	; 16
 490:	fe 01       	movw	r30, r28
 492:	ef 5b       	subi	r30, 0xBF	; 191
 494:	ff 4f       	sbci	r31, 0xFF	; 255
 496:	d9 01       	movw	r26, r18
 498:	01 90       	ld	r0, Z+
 49a:	0d 92       	st	X+, r0
 49c:	8a 95       	dec	r24
 49e:	e1 f7       	brne	.-8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			 break;
 4a0:	d1 c0       	rjmp	.+418    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'f':
			 memcpy(text + (i * 8), letterF, 8 * sizeof(int));
 4a2:	80 e1       	ldi	r24, 0x10	; 16
 4a4:	fe 01       	movw	r30, r28
 4a6:	ef 5a       	subi	r30, 0xAF	; 175
 4a8:	ff 4f       	sbci	r31, 0xFF	; 255
 4aa:	d9 01       	movw	r26, r18
 4ac:	01 90       	ld	r0, Z+
 4ae:	0d 92       	st	X+, r0
 4b0:	8a 95       	dec	r24
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
			 break;
 4b4:	c7 c0       	rjmp	.+398    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'g':
			 memcpy(text + (i * 8), letterG, 8 * sizeof(int));
 4b6:	80 e1       	ldi	r24, 0x10	; 16
 4b8:	fe 01       	movw	r30, r28
 4ba:	ef 59       	subi	r30, 0x9F	; 159
 4bc:	ff 4f       	sbci	r31, 0xFF	; 255
 4be:	d9 01       	movw	r26, r18
 4c0:	01 90       	ld	r0, Z+
 4c2:	0d 92       	st	X+, r0
 4c4:	8a 95       	dec	r24
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			 break;
 4c8:	bd c0       	rjmp	.+378    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'h':
			 memcpy(text + (i * 8), letterH, 8 * sizeof(int));
 4ca:	80 e1       	ldi	r24, 0x10	; 16
 4cc:	fe 01       	movw	r30, r28
 4ce:	ef 58       	subi	r30, 0x8F	; 143
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	d9 01       	movw	r26, r18
 4d4:	01 90       	ld	r0, Z+
 4d6:	0d 92       	st	X+, r0
 4d8:	8a 95       	dec	r24
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
			 break;
 4dc:	b3 c0       	rjmp	.+358    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'i':
			 memcpy(text + (i * 8), letterI, 8 * sizeof(int));
 4de:	80 e1       	ldi	r24, 0x10	; 16
 4e0:	fe 01       	movw	r30, r28
 4e2:	ef 57       	subi	r30, 0x7F	; 127
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	d9 01       	movw	r26, r18
 4e8:	01 90       	ld	r0, Z+
 4ea:	0d 92       	st	X+, r0
 4ec:	8a 95       	dec	r24
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			 break;
 4f0:	a9 c0       	rjmp	.+338    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'j':
			 memcpy(text + (i * 8), letterJ, 8 * sizeof(int));
 4f2:	80 e1       	ldi	r24, 0x10	; 16
 4f4:	fe 01       	movw	r30, r28
 4f6:	ef 56       	subi	r30, 0x6F	; 111
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	d9 01       	movw	r26, r18
 4fc:	01 90       	ld	r0, Z+
 4fe:	0d 92       	st	X+, r0
 500:	8a 95       	dec	r24
 502:	e1 f7       	brne	.-8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			 break;
 504:	9f c0       	rjmp	.+318    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'k':
			 memcpy(text + (i * 8), letterK, 8 * sizeof(int));
 506:	80 e1       	ldi	r24, 0x10	; 16
 508:	fe 01       	movw	r30, r28
 50a:	ef 55       	subi	r30, 0x5F	; 95
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	d9 01       	movw	r26, r18
 510:	01 90       	ld	r0, Z+
 512:	0d 92       	st	X+, r0
 514:	8a 95       	dec	r24
 516:	e1 f7       	brne	.-8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
			 break;
 518:	95 c0       	rjmp	.+298    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'l':
			 memcpy(text + (i * 8), letterL, 8 * sizeof(int));
 51a:	80 e1       	ldi	r24, 0x10	; 16
 51c:	fe 01       	movw	r30, r28
 51e:	ef 54       	subi	r30, 0x4F	; 79
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	d9 01       	movw	r26, r18
 524:	01 90       	ld	r0, Z+
 526:	0d 92       	st	X+, r0
 528:	8a 95       	dec	r24
 52a:	e1 f7       	brne	.-8      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			 break;
 52c:	8b c0       	rjmp	.+278    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'm':
			 memcpy(text + (i * 8), letterM, 8 * sizeof(int));
 52e:	80 e1       	ldi	r24, 0x10	; 16
 530:	fe 01       	movw	r30, r28
 532:	ef 53       	subi	r30, 0x3F	; 63
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	d9 01       	movw	r26, r18
 538:	01 90       	ld	r0, Z+
 53a:	0d 92       	st	X+, r0
 53c:	8a 95       	dec	r24
 53e:	e1 f7       	brne	.-8      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
			 break;
 540:	81 c0       	rjmp	.+258    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'n':
			 memcpy(text + (i * 8), letterN, 8 * sizeof(int));
 542:	80 e1       	ldi	r24, 0x10	; 16
 544:	fe 01       	movw	r30, r28
 546:	ef 52       	subi	r30, 0x2F	; 47
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	d9 01       	movw	r26, r18
 54c:	01 90       	ld	r0, Z+
 54e:	0d 92       	st	X+, r0
 550:	8a 95       	dec	r24
 552:	e1 f7       	brne	.-8      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			 break;
 554:	77 c0       	rjmp	.+238    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'o':
			 memcpy(text + (i * 8), letterO, 8 * sizeof(int));
 556:	80 e1       	ldi	r24, 0x10	; 16
 558:	fe 01       	movw	r30, r28
 55a:	ef 51       	subi	r30, 0x1F	; 31
 55c:	ff 4f       	sbci	r31, 0xFF	; 255
 55e:	d9 01       	movw	r26, r18
 560:	01 90       	ld	r0, Z+
 562:	0d 92       	st	X+, r0
 564:	8a 95       	dec	r24
 566:	e1 f7       	brne	.-8      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
			 break;
 568:	6d c0       	rjmp	.+218    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'p':
			 memcpy(text + (i * 8), letterP, 8 * sizeof(int));
 56a:	80 e1       	ldi	r24, 0x10	; 16
 56c:	fe 01       	movw	r30, r28
 56e:	ef 50       	subi	r30, 0x0F	; 15
 570:	ff 4f       	sbci	r31, 0xFF	; 255
 572:	d9 01       	movw	r26, r18
 574:	01 90       	ld	r0, Z+
 576:	0d 92       	st	X+, r0
 578:	8a 95       	dec	r24
 57a:	e1 f7       	brne	.-8      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
			 break;
 57c:	63 c0       	rjmp	.+198    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'q':
			 memcpy(text + (i * 8), letterQ, 8 * sizeof(int));
 57e:	80 e1       	ldi	r24, 0x10	; 16
 580:	fe 01       	movw	r30, r28
 582:	ef 5f       	subi	r30, 0xFF	; 255
 584:	fe 4f       	sbci	r31, 0xFE	; 254
 586:	d9 01       	movw	r26, r18
 588:	01 90       	ld	r0, Z+
 58a:	0d 92       	st	X+, r0
 58c:	8a 95       	dec	r24
 58e:	e1 f7       	brne	.-8      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
			 break;
 590:	59 c0       	rjmp	.+178    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'r':
			 memcpy(text + (i * 8), letterR, 8 * sizeof(int));
 592:	80 e1       	ldi	r24, 0x10	; 16
 594:	fe 01       	movw	r30, r28
 596:	ef 5e       	subi	r30, 0xEF	; 239
 598:	fe 4f       	sbci	r31, 0xFE	; 254
 59a:	d9 01       	movw	r26, r18
 59c:	01 90       	ld	r0, Z+
 59e:	0d 92       	st	X+, r0
 5a0:	8a 95       	dec	r24
 5a2:	e1 f7       	brne	.-8      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
			 break;
 5a4:	4f c0       	rjmp	.+158    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 's':
			 memcpy(text + (i * 8), letterS, 8 * sizeof(int));
 5a6:	80 e1       	ldi	r24, 0x10	; 16
 5a8:	fe 01       	movw	r30, r28
 5aa:	ef 5d       	subi	r30, 0xDF	; 223
 5ac:	fe 4f       	sbci	r31, 0xFE	; 254
 5ae:	d9 01       	movw	r26, r18
 5b0:	01 90       	ld	r0, Z+
 5b2:	0d 92       	st	X+, r0
 5b4:	8a 95       	dec	r24
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
			 break;
 5b8:	45 c0       	rjmp	.+138    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 't':
			 memcpy(text + (i * 8), letterT, 8 * sizeof(int));
 5ba:	80 e1       	ldi	r24, 0x10	; 16
 5bc:	fe 01       	movw	r30, r28
 5be:	ef 5c       	subi	r30, 0xCF	; 207
 5c0:	fe 4f       	sbci	r31, 0xFE	; 254
 5c2:	d9 01       	movw	r26, r18
 5c4:	01 90       	ld	r0, Z+
 5c6:	0d 92       	st	X+, r0
 5c8:	8a 95       	dec	r24
 5ca:	e1 f7       	brne	.-8      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
			 break;
 5cc:	3b c0       	rjmp	.+118    	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'u':
			 memcpy(text + (i * 8), letterU, 8 * sizeof(int));
 5ce:	80 e1       	ldi	r24, 0x10	; 16
 5d0:	fe 01       	movw	r30, r28
 5d2:	ef 5b       	subi	r30, 0xBF	; 191
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	d9 01       	movw	r26, r18
 5d8:	01 90       	ld	r0, Z+
 5da:	0d 92       	st	X+, r0
 5dc:	8a 95       	dec	r24
 5de:	e1 f7       	brne	.-8      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
			 break;
 5e0:	31 c0       	rjmp	.+98     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'v':
			 memcpy(text + (i * 8), letterV, 8 * sizeof(int));
 5e2:	80 e1       	ldi	r24, 0x10	; 16
 5e4:	fe 01       	movw	r30, r28
 5e6:	ef 5a       	subi	r30, 0xAF	; 175
 5e8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ea:	d9 01       	movw	r26, r18
 5ec:	01 90       	ld	r0, Z+
 5ee:	0d 92       	st	X+, r0
 5f0:	8a 95       	dec	r24
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
			 break;
 5f4:	27 c0       	rjmp	.+78     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'w':
			 memcpy(text + (i * 8), letterW, 8 * sizeof(int));
 5f6:	80 e1       	ldi	r24, 0x10	; 16
 5f8:	fe 01       	movw	r30, r28
 5fa:	ef 59       	subi	r30, 0x9F	; 159
 5fc:	fe 4f       	sbci	r31, 0xFE	; 254
 5fe:	d9 01       	movw	r26, r18
 600:	01 90       	ld	r0, Z+
 602:	0d 92       	st	X+, r0
 604:	8a 95       	dec	r24
 606:	e1 f7       	brne	.-8      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
			 break;
 608:	1d c0       	rjmp	.+58     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'x':
			 memcpy(text + (i * 8), letterX, 8 * sizeof(int));
 60a:	80 e1       	ldi	r24, 0x10	; 16
 60c:	fe 01       	movw	r30, r28
 60e:	ef 58       	subi	r30, 0x8F	; 143
 610:	fe 4f       	sbci	r31, 0xFE	; 254
 612:	d9 01       	movw	r26, r18
 614:	01 90       	ld	r0, Z+
 616:	0d 92       	st	X+, r0
 618:	8a 95       	dec	r24
 61a:	e1 f7       	brne	.-8      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
			 break;
 61c:	13 c0       	rjmp	.+38     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'y':
			 memcpy(text + (i * 8), letterY, 8 * sizeof(int));
 61e:	80 e1       	ldi	r24, 0x10	; 16
 620:	fe 01       	movw	r30, r28
 622:	ef 57       	subi	r30, 0x7F	; 127
 624:	fe 4f       	sbci	r31, 0xFE	; 254
 626:	d9 01       	movw	r26, r18
 628:	01 90       	ld	r0, Z+
 62a:	0d 92       	st	X+, r0
 62c:	8a 95       	dec	r24
 62e:	e1 f7       	brne	.-8      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
			 break;
 630:	09 c0       	rjmp	.+18     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
			 case 'z':
			 memcpy(text + (i * 8), letterZ, 8 * sizeof(int));
 632:	80 e1       	ldi	r24, 0x10	; 16
 634:	fe 01       	movw	r30, r28
 636:	ef 56       	subi	r30, 0x6F	; 111
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	d9 01       	movw	r26, r18
 63c:	01 90       	ld	r0, Z+
 63e:	0d 92       	st	X+, r0
 640:	8a 95       	dec	r24
 642:	e1 f7       	brne	.-8      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 644:	20 5f       	subi	r18, 0xF0	; 240
 646:	3f 4f       	sbci	r19, 0xFF	; 255
	 int letterY[8] = {0x00, 0x00, 0x22, 0x14, 0x08, 0x04, 0x02, 0x00};
	 int letterZ[8] = {0x00, 0x41, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00};
	 
	 char string[22] = "nerdsarethenewcool";
	 
	 for(int i = 0; i < 22; i++){
 648:	26 17       	cp	r18, r22
 64a:	37 07       	cpc	r19, r23
 64c:	09 f0       	breq	.+2      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
			 case ' ':
			 break;
		 }
	 }
	 
	 write_board_data(text);
 64e:	ec ce       	rjmp	.-552    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 650:	c8 01       	movw	r24, r16
	 free(text);
 652:	66 dd       	rcall	.-1332   	; 0x120 <write_board_data>
 654:	c8 01       	movw	r24, r16
 656:	25 d1       	rcall	.+586    	; 0x8a2 <free>
 }
 658:	ca 54       	subi	r28, 0x4A	; 74
 65a:	de 4f       	sbci	r29, 0xFE	; 254
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	de bf       	out	0x3e, r29	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	cd bf       	out	0x3d, r28	; 61
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	08 95       	ret

00000670 <getRowAdress>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 670:	8a 5f       	subi	r24, 0xFA	; 250
 672:	9e 4f       	sbci	r25, 0xFE	; 254
 674:	fc 01       	movw	r30, r24
 676:	80 81       	ld	r24, Z
 678:	08 95       	ret

0000067a <twi_start>:
 67a:	84 ea       	ldi	r24, 0xA4	; 164
 67c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 680:	e4 e7       	ldi	r30, 0x74	; 116
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	80 81       	ld	r24, Z
 686:	88 23       	and	r24, r24
 688:	ec f7       	brge	.-6      	; 0x684 <twi_start+0xa>
 68a:	08 95       	ret

0000068c <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 68c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 690:	84 e8       	ldi	r24, 0x84	; 132
 692:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 696:	e4 e7       	ldi	r30, 0x74	; 116
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	88 23       	and	r24, r24
 69e:	ec f7       	brge	.-6      	; 0x69a <twi_tx+0xe>
}
 6a0:	08 95       	ret

000006a2 <twi_init>:
inputs:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
	TWSR = 0;
 6a8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 6ac:	80 e2       	ldi	r24, 0x20	; 32
 6ae:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	// Init HT16K22. Page 32 datasheet
	twi_start();
 6b2:	e3 df       	rcall	.-58     	; 0x67a <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 6b4:	80 ee       	ldi	r24, 0xE0	; 224
 6b6:	ea df       	rcall	.-44     	; 0x68c <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 6b8:	81 e2       	ldi	r24, 0x21	; 33
 6ba:	e8 df       	rcall	.-48     	; 0x68c <twi_tx>
 6bc:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 6be:	d0 e0       	ldi	r29, 0x00	; 0
 6c0:	14 e9       	ldi	r17, 0x94	; 148
 6c2:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
	
	twi_start();
 6c4:	da df       	rcall	.-76     	; 0x67a <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 6c6:	80 ee       	ldi	r24, 0xE0	; 224
 6c8:	e1 df       	rcall	.-62     	; 0x68c <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 6ca:	80 ea       	ldi	r24, 0xA0	; 160
 6cc:	df df       	rcall	.-66     	; 0x68c <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 6ce:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();
	
	twi_start();
 6d0:	d4 df       	rcall	.-88     	; 0x67a <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 6d2:	80 ee       	ldi	r24, 0xE0	; 224
 6d4:	db df       	rcall	.-74     	; 0x68c <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 6d6:	83 ee       	ldi	r24, 0xE3	; 227
 6d8:	d9 df       	rcall	.-78     	; 0x68c <twi_tx>
 6da:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 6dc:	ce df       	rcall	.-100    	; 0x67a <twi_start>
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();
	
	twi_start();
 6de:	80 ee       	ldi	r24, 0xE0	; 224
 6e0:	d5 df       	rcall	.-86     	; 0x68c <twi_tx>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 6e2:	81 e8       	ldi	r24, 0x81	; 129
 6e4:	d3 df       	rcall	.-90     	; 0x68c <twi_tx>
 6e6:	18 83       	st	Y, r17
	twi_tx(0x81);	// Display OFF - Blink On
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 6ee:	08 95       	ret

000006f0 <write_data>:
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
	
}
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	d8 2f       	mov	r29, r24
 6f6:	c6 2f       	mov	r28, r22
	while( 0 == (TWCR & 0x80) );
}

void write_data(unsigned char adress,unsigned char data)
{
	twi_start();
 6f8:	c0 df       	rcall	.-128    	; 0x67a <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 6fa:	80 ee       	ldi	r24, 0xE0	; 224
 6fc:	c7 df       	rcall	.-114    	; 0x68c <twi_tx>
	twi_tx(adress);	// Address
 6fe:	8d 2f       	mov	r24, r29
 700:	c5 df       	rcall	.-118    	; 0x68c <twi_tx>
	twi_tx(data);	// data
 702:	8c 2f       	mov	r24, r28
 704:	c3 df       	rcall	.-122    	; 0x68c <twi_tx>
 706:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 708:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 70c:	df 91       	pop	r29
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(adress);	// Address
	twi_tx(data);	// data
	twi_stop();
}
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <wait>:
 712:	18 16       	cp	r1, r24
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
 714:	19 06       	cpc	r1, r25
 716:	6c f4       	brge	.+26     	; 0x732 <wait+0x20>
 718:	20 e0       	ldi	r18, 0x00	; 0
 71a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71c:	ef ec       	ldi	r30, 0xCF	; 207
 71e:	f7 e0       	ldi	r31, 0x07	; 7
 720:	31 97       	sbiw	r30, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <wait+0xe>
 724:	00 c0       	rjmp	.+0      	; 0x726 <wait+0x14>
 726:	00 00       	nop
 728:	2f 5f       	subi	r18, 0xFF	; 255
 72a:	3f 4f       	sbci	r19, 0xFF	; 255
 72c:	82 17       	cp	r24, r18
 72e:	93 07       	cpc	r25, r19
 730:	a9 f7       	brne	.-22     	; 0x71c <wait+0xa>
 732:	08 95       	ret

00000734 <initMatrix>:
		wait(100);
    }
}

void initMatrix(){
	twi_init();
 734:	b6 df       	rcall	.-148    	; 0x6a2 <twi_init>
	initBoard();
 736:	4a dd       	rcall	.-1388   	; 0x1cc <initBoard>
 738:	8f ef       	ldi	r24, 0xFF	; 255
	
	DDRA = 0b11111111;
 73a:	8a bb       	out	0x1a, r24	; 26
 73c:	8a b7       	in	r24, 0x3a	; 58

	EICRB |= 0b11000000; //set INT7 faling edge
 73e:	80 6c       	ori	r24, 0xC0	; 192
 740:	8a bf       	out	0x3a, r24	; 58
 742:	89 b7       	in	r24, 0x39	; 57
	EIMSK |= 0b10000000; //enable INT&
 744:	80 68       	ori	r24, 0x80	; 128
 746:	89 bf       	out	0x39, r24	; 57
 748:	78 94       	sei
	//enable global interrupt system
	sei();
 74a:	08 95       	ret

0000074c <main>:
 74c:	f3 df       	rcall	.-26     	; 0x734 <initMatrix>
}

int main(void)
{
	initMatrix();
	wait(500);
 74e:	84 ef       	ldi	r24, 0xF4	; 244
 750:	91 e0       	ldi	r25, 0x01	; 1
	
    /* Replace with your application code */
    while (1) 
    {
		show_text();
 752:	df df       	rcall	.-66     	; 0x712 <wait>
 754:	3d dd       	rcall	.-1414   	; 0x1d0 <show_text>
		upOffset();
 756:	d2 dc       	rcall	.-1628   	; 0xfc <upOffset>
		wait(100);
 758:	84 e6       	ldi	r24, 0x64	; 100
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	da df       	rcall	.-76     	; 0x712 <wait>
 75e:	fa cf       	rjmp	.-12     	; 0x754 <main+0x8>

00000760 <__tablejump2__>:
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	00 24       	eor	r0, r0
 766:	00 1c       	adc	r0, r0
 768:	0b be       	out	0x3b, r0	; 59
 76a:	07 90       	elpm	r0, Z+
 76c:	f6 91       	elpm	r31, Z
 76e:	e0 2d       	mov	r30, r0
 770:	09 94       	ijmp

00000772 <malloc>:
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	82 30       	cpi	r24, 0x02	; 2
 77c:	91 05       	cpc	r25, r1
 77e:	10 f4       	brcc	.+4      	; 0x784 <malloc+0x12>
 780:	82 e0       	ldi	r24, 0x02	; 2
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	e0 91 d8 02 	lds	r30, 0x02D8	; 0x8002d8 <__flp>
 788:	f0 91 d9 02 	lds	r31, 0x02D9	; 0x8002d9 <__flp+0x1>
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	a0 e0       	ldi	r26, 0x00	; 0
 792:	b0 e0       	ldi	r27, 0x00	; 0
 794:	30 97       	sbiw	r30, 0x00	; 0
 796:	19 f1       	breq	.+70     	; 0x7de <malloc+0x6c>
 798:	40 81       	ld	r20, Z
 79a:	51 81       	ldd	r21, Z+1	; 0x01
 79c:	02 81       	ldd	r16, Z+2	; 0x02
 79e:	13 81       	ldd	r17, Z+3	; 0x03
 7a0:	48 17       	cp	r20, r24
 7a2:	59 07       	cpc	r21, r25
 7a4:	c8 f0       	brcs	.+50     	; 0x7d8 <malloc+0x66>
 7a6:	84 17       	cp	r24, r20
 7a8:	95 07       	cpc	r25, r21
 7aa:	69 f4       	brne	.+26     	; 0x7c6 <malloc+0x54>
 7ac:	10 97       	sbiw	r26, 0x00	; 0
 7ae:	31 f0       	breq	.+12     	; 0x7bc <malloc+0x4a>
 7b0:	12 96       	adiw	r26, 0x02	; 2
 7b2:	0c 93       	st	X, r16
 7b4:	12 97       	sbiw	r26, 0x02	; 2
 7b6:	13 96       	adiw	r26, 0x03	; 3
 7b8:	1c 93       	st	X, r17
 7ba:	27 c0       	rjmp	.+78     	; 0x80a <malloc+0x98>
 7bc:	00 93 d8 02 	sts	0x02D8, r16	; 0x8002d8 <__flp>
 7c0:	10 93 d9 02 	sts	0x02D9, r17	; 0x8002d9 <__flp+0x1>
 7c4:	22 c0       	rjmp	.+68     	; 0x80a <malloc+0x98>
 7c6:	21 15       	cp	r18, r1
 7c8:	31 05       	cpc	r19, r1
 7ca:	19 f0       	breq	.+6      	; 0x7d2 <malloc+0x60>
 7cc:	42 17       	cp	r20, r18
 7ce:	53 07       	cpc	r21, r19
 7d0:	18 f4       	brcc	.+6      	; 0x7d8 <malloc+0x66>
 7d2:	9a 01       	movw	r18, r20
 7d4:	bd 01       	movw	r22, r26
 7d6:	ef 01       	movw	r28, r30
 7d8:	df 01       	movw	r26, r30
 7da:	f8 01       	movw	r30, r16
 7dc:	db cf       	rjmp	.-74     	; 0x794 <malloc+0x22>
 7de:	21 15       	cp	r18, r1
 7e0:	31 05       	cpc	r19, r1
 7e2:	f9 f0       	breq	.+62     	; 0x822 <malloc+0xb0>
 7e4:	28 1b       	sub	r18, r24
 7e6:	39 0b       	sbc	r19, r25
 7e8:	24 30       	cpi	r18, 0x04	; 4
 7ea:	31 05       	cpc	r19, r1
 7ec:	80 f4       	brcc	.+32     	; 0x80e <malloc+0x9c>
 7ee:	8a 81       	ldd	r24, Y+2	; 0x02
 7f0:	9b 81       	ldd	r25, Y+3	; 0x03
 7f2:	61 15       	cp	r22, r1
 7f4:	71 05       	cpc	r23, r1
 7f6:	21 f0       	breq	.+8      	; 0x800 <malloc+0x8e>
 7f8:	fb 01       	movw	r30, r22
 7fa:	93 83       	std	Z+3, r25	; 0x03
 7fc:	82 83       	std	Z+2, r24	; 0x02
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <malloc+0x96>
 800:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <__flp+0x1>
 804:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <__flp>
 808:	fe 01       	movw	r30, r28
 80a:	32 96       	adiw	r30, 0x02	; 2
 80c:	44 c0       	rjmp	.+136    	; 0x896 <malloc+0x124>
 80e:	fe 01       	movw	r30, r28
 810:	e2 0f       	add	r30, r18
 812:	f3 1f       	adc	r31, r19
 814:	81 93       	st	Z+, r24
 816:	91 93       	st	Z+, r25
 818:	22 50       	subi	r18, 0x02	; 2
 81a:	31 09       	sbc	r19, r1
 81c:	39 83       	std	Y+1, r19	; 0x01
 81e:	28 83       	st	Y, r18
 820:	3a c0       	rjmp	.+116    	; 0x896 <malloc+0x124>
 822:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
 826:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
 82a:	23 2b       	or	r18, r19
 82c:	41 f4       	brne	.+16     	; 0x83e <malloc+0xcc>
 82e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 832:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 836:	30 93 d7 02 	sts	0x02D7, r19	; 0x8002d7 <__brkval+0x1>
 83a:	20 93 d6 02 	sts	0x02D6, r18	; 0x8002d6 <__brkval>
 83e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 842:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 846:	21 15       	cp	r18, r1
 848:	31 05       	cpc	r19, r1
 84a:	41 f4       	brne	.+16     	; 0x85c <malloc+0xea>
 84c:	2d b7       	in	r18, 0x3d	; 61
 84e:	3e b7       	in	r19, 0x3e	; 62
 850:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 854:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 858:	24 1b       	sub	r18, r20
 85a:	35 0b       	sbc	r19, r21
 85c:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <__brkval>
 860:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <__brkval+0x1>
 864:	e2 17       	cp	r30, r18
 866:	f3 07       	cpc	r31, r19
 868:	a0 f4       	brcc	.+40     	; 0x892 <malloc+0x120>
 86a:	2e 1b       	sub	r18, r30
 86c:	3f 0b       	sbc	r19, r31
 86e:	28 17       	cp	r18, r24
 870:	39 07       	cpc	r19, r25
 872:	78 f0       	brcs	.+30     	; 0x892 <malloc+0x120>
 874:	ac 01       	movw	r20, r24
 876:	4e 5f       	subi	r20, 0xFE	; 254
 878:	5f 4f       	sbci	r21, 0xFF	; 255
 87a:	24 17       	cp	r18, r20
 87c:	35 07       	cpc	r19, r21
 87e:	48 f0       	brcs	.+18     	; 0x892 <malloc+0x120>
 880:	4e 0f       	add	r20, r30
 882:	5f 1f       	adc	r21, r31
 884:	50 93 d7 02 	sts	0x02D7, r21	; 0x8002d7 <__brkval+0x1>
 888:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <__brkval>
 88c:	81 93       	st	Z+, r24
 88e:	91 93       	st	Z+, r25
 890:	02 c0       	rjmp	.+4      	; 0x896 <malloc+0x124>
 892:	e0 e0       	ldi	r30, 0x00	; 0
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	cf 01       	movw	r24, r30
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	08 95       	ret

000008a2 <free>:
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	09 f4       	brne	.+2      	; 0x8ac <free+0xa>
 8aa:	81 c0       	rjmp	.+258    	; 0x9ae <free+0x10c>
 8ac:	fc 01       	movw	r30, r24
 8ae:	32 97       	sbiw	r30, 0x02	; 2
 8b0:	13 82       	std	Z+3, r1	; 0x03
 8b2:	12 82       	std	Z+2, r1	; 0x02
 8b4:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <__flp>
 8b8:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <__flp+0x1>
 8bc:	10 97       	sbiw	r26, 0x00	; 0
 8be:	81 f4       	brne	.+32     	; 0x8e0 <free+0x3e>
 8c0:	20 81       	ld	r18, Z
 8c2:	31 81       	ldd	r19, Z+1	; 0x01
 8c4:	82 0f       	add	r24, r18
 8c6:	93 1f       	adc	r25, r19
 8c8:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
 8cc:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
 8d0:	28 17       	cp	r18, r24
 8d2:	39 07       	cpc	r19, r25
 8d4:	51 f5       	brne	.+84     	; 0x92a <free+0x88>
 8d6:	f0 93 d7 02 	sts	0x02D7, r31	; 0x8002d7 <__brkval+0x1>
 8da:	e0 93 d6 02 	sts	0x02D6, r30	; 0x8002d6 <__brkval>
 8de:	67 c0       	rjmp	.+206    	; 0x9ae <free+0x10c>
 8e0:	ed 01       	movw	r28, r26
 8e2:	20 e0       	ldi	r18, 0x00	; 0
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	ce 17       	cp	r28, r30
 8e8:	df 07       	cpc	r29, r31
 8ea:	40 f4       	brcc	.+16     	; 0x8fc <free+0x5a>
 8ec:	4a 81       	ldd	r20, Y+2	; 0x02
 8ee:	5b 81       	ldd	r21, Y+3	; 0x03
 8f0:	9e 01       	movw	r18, r28
 8f2:	41 15       	cp	r20, r1
 8f4:	51 05       	cpc	r21, r1
 8f6:	f1 f0       	breq	.+60     	; 0x934 <free+0x92>
 8f8:	ea 01       	movw	r28, r20
 8fa:	f5 cf       	rjmp	.-22     	; 0x8e6 <free+0x44>
 8fc:	d3 83       	std	Z+3, r29	; 0x03
 8fe:	c2 83       	std	Z+2, r28	; 0x02
 900:	40 81       	ld	r20, Z
 902:	51 81       	ldd	r21, Z+1	; 0x01
 904:	84 0f       	add	r24, r20
 906:	95 1f       	adc	r25, r21
 908:	c8 17       	cp	r28, r24
 90a:	d9 07       	cpc	r29, r25
 90c:	59 f4       	brne	.+22     	; 0x924 <free+0x82>
 90e:	88 81       	ld	r24, Y
 910:	99 81       	ldd	r25, Y+1	; 0x01
 912:	84 0f       	add	r24, r20
 914:	95 1f       	adc	r25, r21
 916:	02 96       	adiw	r24, 0x02	; 2
 918:	91 83       	std	Z+1, r25	; 0x01
 91a:	80 83       	st	Z, r24
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	9b 81       	ldd	r25, Y+3	; 0x03
 920:	93 83       	std	Z+3, r25	; 0x03
 922:	82 83       	std	Z+2, r24	; 0x02
 924:	21 15       	cp	r18, r1
 926:	31 05       	cpc	r19, r1
 928:	29 f4       	brne	.+10     	; 0x934 <free+0x92>
 92a:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <__flp+0x1>
 92e:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <__flp>
 932:	3d c0       	rjmp	.+122    	; 0x9ae <free+0x10c>
 934:	e9 01       	movw	r28, r18
 936:	fb 83       	std	Y+3, r31	; 0x03
 938:	ea 83       	std	Y+2, r30	; 0x02
 93a:	49 91       	ld	r20, Y+
 93c:	59 91       	ld	r21, Y+
 93e:	c4 0f       	add	r28, r20
 940:	d5 1f       	adc	r29, r21
 942:	ec 17       	cp	r30, r28
 944:	fd 07       	cpc	r31, r29
 946:	61 f4       	brne	.+24     	; 0x960 <free+0xbe>
 948:	80 81       	ld	r24, Z
 94a:	91 81       	ldd	r25, Z+1	; 0x01
 94c:	84 0f       	add	r24, r20
 94e:	95 1f       	adc	r25, r21
 950:	02 96       	adiw	r24, 0x02	; 2
 952:	e9 01       	movw	r28, r18
 954:	99 83       	std	Y+1, r25	; 0x01
 956:	88 83       	st	Y, r24
 958:	82 81       	ldd	r24, Z+2	; 0x02
 95a:	93 81       	ldd	r25, Z+3	; 0x03
 95c:	9b 83       	std	Y+3, r25	; 0x03
 95e:	8a 83       	std	Y+2, r24	; 0x02
 960:	e0 e0       	ldi	r30, 0x00	; 0
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	12 96       	adiw	r26, 0x02	; 2
 966:	8d 91       	ld	r24, X+
 968:	9c 91       	ld	r25, X
 96a:	13 97       	sbiw	r26, 0x03	; 3
 96c:	00 97       	sbiw	r24, 0x00	; 0
 96e:	19 f0       	breq	.+6      	; 0x976 <free+0xd4>
 970:	fd 01       	movw	r30, r26
 972:	dc 01       	movw	r26, r24
 974:	f7 cf       	rjmp	.-18     	; 0x964 <free+0xc2>
 976:	8d 91       	ld	r24, X+
 978:	9c 91       	ld	r25, X
 97a:	11 97       	sbiw	r26, 0x01	; 1
 97c:	9d 01       	movw	r18, r26
 97e:	2e 5f       	subi	r18, 0xFE	; 254
 980:	3f 4f       	sbci	r19, 0xFF	; 255
 982:	82 0f       	add	r24, r18
 984:	93 1f       	adc	r25, r19
 986:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <__brkval>
 98a:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <__brkval+0x1>
 98e:	28 17       	cp	r18, r24
 990:	39 07       	cpc	r19, r25
 992:	69 f4       	brne	.+26     	; 0x9ae <free+0x10c>
 994:	30 97       	sbiw	r30, 0x00	; 0
 996:	29 f4       	brne	.+10     	; 0x9a2 <free+0x100>
 998:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <__flp+0x1>
 99c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <__flp>
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <free+0x104>
 9a2:	13 82       	std	Z+3, r1	; 0x03
 9a4:	12 82       	std	Z+2, r1	; 0x02
 9a6:	b0 93 d7 02 	sts	0x02D7, r27	; 0x8002d7 <__brkval+0x1>
 9aa:	a0 93 d6 02 	sts	0x02D6, r26	; 0x8002d6 <__brkval>
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	08 95       	ret

000009b4 <_exit>:
 9b4:	f8 94       	cli

000009b6 <__stop_program>:
 9b6:	ff cf       	rjmp	.-2      	; 0x9b6 <__stop_program>
