
C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c93  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ec  00000000  00000000  00001033  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000468  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b7  00000000  00000000  00001e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000295  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	a8 d0       	rcall	.+336    	; 0x1ea <main>
  9a:	e4 c0       	rjmp	.+456    	; 0x264 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
	spi_writeWord(0x0C, 0x01);
}
// Set display off ('shut down')
void displayOff()
{
	spi_writeWord(0x0C, 0x00);
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <spi_masterInit>:
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	bb 98       	cbi	0x17, 3	; 23
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	82 e5       	ldi	r24, 0x52	; 82
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	08 95       	ret

000000ce <spi_write>:
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <spi_write+0x2>
  d4:	08 95       	ret

000000d6 <spi_slaveSelect>:
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <spi_slaveSelect+0xc>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <spi_slaveSelect+0x8>
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	08 95       	ret

000000ee <spi_slaveDeSelect>:
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <spi_slaveDeSelect+0xc>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <spi_slaveDeSelect+0x8>
  fe:	29 2b       	or	r18, r25
 100:	28 bb       	out	0x18, r18	; 24
 102:	08 95       	ret

00000104 <spi_writeWord>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	d8 2f       	mov	r29, r24
 10a:	c6 2f       	mov	r28, r22
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	e3 df       	rcall	.-58     	; 0xd6 <spi_slaveSelect>
 110:	8d 2f       	mov	r24, r29
 112:	dd df       	rcall	.-70     	; 0xce <spi_write>
 114:	8c 2f       	mov	r24, r28
 116:	db df       	rcall	.-74     	; 0xce <spi_write>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	e9 df       	rcall	.-46     	; 0xee <spi_slaveDeSelect>
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <displayDriverInit>:
 122:	6f e0       	ldi	r22, 0x0F	; 15
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	89 e0       	ldi	r24, 0x09	; 9
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ec df       	rcall	.-40     	; 0x104 <spi_writeWord>
 12c:	6f e0       	ldi	r22, 0x0F	; 15
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	e7 df       	rcall	.-50     	; 0x104 <spi_writeWord>
 136:	63 e0       	ldi	r22, 0x03	; 3
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	8b e0       	ldi	r24, 0x0B	; 11
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	e2 df       	rcall	.-60     	; 0x104 <spi_writeWord>
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	dd cf       	rjmp	.-70     	; 0x104 <spi_writeWord>
 14a:	08 95       	ret

0000014c <writeLedDisplay>:
	spi_write(data); // -> 1 = Normal operation
	spi_slaveDeSelect(0); // Deselect display chip
}

 // toont de waarde van value op het 4-digit display
void writeLedDisplay( int value ){
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
	if (value >= 0 && value <= 9999)
 158:	80 31       	cpi	r24, 0x10	; 16
 15a:	27 e2       	ldi	r18, 0x27	; 39
 15c:	92 07       	cpc	r25, r18
 15e:	c0 f4       	brcc	.+48     	; 0x190 <writeLedDisplay+0x44>
	{
		int cursor = 1;
		while (value > 0) {
 160:	18 16       	cp	r1, r24
 162:	19 06       	cpc	r1, r25
 164:	0c f0       	brlt	.+2      	; 0x168 <writeLedDisplay+0x1c>
 166:	3a c0       	rjmp	.+116    	; 0x1dc <writeLedDisplay+0x90>
 168:	c1 e0       	ldi	r28, 0x01	; 1
			int digit = value % 10;
			
			spi_writeWord(cursor, digit);
 16a:	0f 2e       	mov	r0, r31
 16c:	fa e0       	ldi	r31, 0x0A	; 10
 16e:	ef 2e       	mov	r14, r31
 170:	f1 2c       	mov	r15, r1
 172:	f0 2d       	mov	r31, r0
 174:	b7 01       	movw	r22, r14
 176:	4f d0       	rcall	.+158    	; 0x216 <__divmodhi4>
 178:	16 2f       	mov	r17, r22
 17a:	d7 2f       	mov	r29, r23
 17c:	68 2f       	mov	r22, r24
 17e:	8c 2f       	mov	r24, r28
 180:	c1 df       	rcall	.-126    	; 0x104 <spi_writeWord>
			cursor++;
			
			value /= 10;
 182:	81 2f       	mov	r24, r17
 184:	9d 2f       	mov	r25, r29
 186:	cf 5f       	subi	r28, 0xFF	; 255
 // toont de waarde van value op het 4-digit display
void writeLedDisplay( int value ){
	if (value >= 0 && value <= 9999)
	{
		int cursor = 1;
		while (value > 0) {
 188:	18 16       	cp	r1, r24
 18a:	19 06       	cpc	r1, r25
 18c:	9c f3       	brlt	.-26     	; 0x174 <writeLedDisplay+0x28>
 18e:	26 c0       	rjmp	.+76     	; 0x1dc <writeLedDisplay+0x90>
			spi_writeWord(cursor, digit);
			cursor++;
			
			value /= 10;
		}
	}else if (value < 0 && value >= -999)
 190:	9c 01       	movw	r18, r24
 192:	29 51       	subi	r18, 0x19	; 25
 194:	3c 4f       	sbci	r19, 0xFC	; 252
 196:	27 3e       	cpi	r18, 0xE7	; 231
 198:	33 40       	sbci	r19, 0x03	; 3
 19a:	00 f5       	brcc	.+64     	; 0x1dc <writeLedDisplay+0x90>
	{
		value *= -1;
 19c:	91 95       	neg	r25
 19e:	81 95       	neg	r24
 1a0:	91 09       	sbc	r25, r1
		int cursor = 1;
		while (value > 0) {
 1a2:	18 16       	cp	r1, r24
 1a4:	19 06       	cpc	r1, r25
 1a6:	ac f4       	brge	.+42     	; 0x1d2 <writeLedDisplay+0x86>
 1a8:	c1 e0       	ldi	r28, 0x01	; 1
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
			int digit = value % 10;
			
			spi_writeWord(cursor, digit);
 1ac:	0f 2e       	mov	r0, r31
 1ae:	fa e0       	ldi	r31, 0x0A	; 10
 1b0:	ef 2e       	mov	r14, r31
 1b2:	f1 2c       	mov	r15, r1
 1b4:	f0 2d       	mov	r31, r0
 1b6:	b7 01       	movw	r22, r14
 1b8:	2e d0       	rcall	.+92     	; 0x216 <__divmodhi4>
 1ba:	06 2f       	mov	r16, r22
 1bc:	17 2f       	mov	r17, r23
 1be:	68 2f       	mov	r22, r24
 1c0:	8c 2f       	mov	r24, r28
 1c2:	a0 df       	rcall	.-192    	; 0x104 <spi_writeWord>
			cursor++;
 1c4:	21 96       	adiw	r28, 0x01	; 1
			
			value /= 10;
 1c6:	80 2f       	mov	r24, r16
 1c8:	91 2f       	mov	r25, r17
		}
	}else if (value < 0 && value >= -999)
	{
		value *= -1;
		int cursor = 1;
		while (value > 0) {
 1ca:	18 16       	cp	r1, r24
 1cc:	19 06       	cpc	r1, r25
 1ce:	9c f3       	brlt	.-26     	; 0x1b6 <writeLedDisplay+0x6a>
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <writeLedDisplay+0x8a>
			value /= 10;
		}
	}else if (value < 0 && value >= -999)
	{
		value *= -1;
		int cursor = 1;
 1d2:	c1 e0       	ldi	r28, 0x01	; 1
			spi_writeWord(cursor, digit);
			cursor++;
			
			value /= 10;
		}
		spi_writeWord(cursor, 10);
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
 1d6:	6a e0       	ldi	r22, 0x0A	; 10
 1d8:	8c 2f       	mov	r24, r28
 1da:	94 df       	rcall	.-216    	; 0x104 <spi_writeWord>
	}
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	08 95       	ret

000001ea <main>:

int main()
{
 1ea:	cf 93       	push	r28
	DDRB=0x01; // Set PB0 pin as output for display select
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	87 bb       	out	0x17, r24	; 23
	spi_masterInit(); // Initialize spi module
 1f0:	67 df       	rcall	.-306    	; 0xc0 <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 1f2:	97 df       	rcall	.-210    	; 0x122 <displayDriverInit>
 1f4:	c1 e0       	ldi	r28, 0x01	; 1
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 1f6:	60 e0       	ldi	r22, 0x00	; 0
	{
		 spi_writeWord(i,0);
 1f8:	8c 2f       	mov	r24, r28
 1fa:	84 df       	rcall	.-248    	; 0x104 <spi_writeWord>
 1fc:	cf 5f       	subi	r28, 0xFF	; 255
{
	DDRB=0x01; // Set PB0 pin as output for display select
	spi_masterInit(); // Initialize spi module
	displayDriverInit(); // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 1fe:	c5 30       	cpi	r28, 0x05	; 5
 200:	d1 f7       	brne	.-12     	; 0x1f6 <main+0xc>
	{
		 spi_writeWord(i,0);
	}
	wait(1000);
 202:	88 ee       	ldi	r24, 0xE8	; 232
 204:	93 e0       	ldi	r25, 0x03	; 3
 206:	4b df       	rcall	.-362    	; 0x9e <wait>
		spi_writeWord(5-i, i);
		wait(1000);
	 }
	wait(1000); */
	
	writeLedDisplay(-123);
 208:	85 e8       	ldi	r24, 0x85	; 133
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	9f df       	rcall	.-194    	; 0x14c <writeLedDisplay>
 20e:	81 e0       	ldi	r24, 0x01	; 1
	
	
	return (1);
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <__divmodhi4>:
 216:	97 fb       	bst	r25, 7
 218:	07 2e       	mov	r0, r23
 21a:	16 f4       	brtc	.+4      	; 0x220 <__divmodhi4+0xa>
 21c:	00 94       	com	r0
 21e:	06 d0       	rcall	.+12     	; 0x22c <__divmodhi4_neg1>
 220:	77 fd       	sbrc	r23, 7
 222:	08 d0       	rcall	.+16     	; 0x234 <__divmodhi4_neg2>
 224:	0b d0       	rcall	.+22     	; 0x23c <__udivmodhi4>
 226:	07 fc       	sbrc	r0, 7
 228:	05 d0       	rcall	.+10     	; 0x234 <__divmodhi4_neg2>
 22a:	3e f4       	brtc	.+14     	; 0x23a <__divmodhi4_exit>

0000022c <__divmodhi4_neg1>:
 22c:	90 95       	com	r25
 22e:	81 95       	neg	r24
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	08 95       	ret

00000234 <__divmodhi4_neg2>:
 234:	70 95       	com	r23
 236:	61 95       	neg	r22
 238:	7f 4f       	sbci	r23, 0xFF	; 255

0000023a <__divmodhi4_exit>:
 23a:	08 95       	ret

0000023c <__udivmodhi4>:
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	51 e1       	ldi	r21, 0x11	; 17
 242:	07 c0       	rjmp	.+14     	; 0x252 <__udivmodhi4_ep>

00000244 <__udivmodhi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	a6 17       	cp	r26, r22
 24a:	b7 07       	cpc	r27, r23
 24c:	10 f0       	brcs	.+4      	; 0x252 <__udivmodhi4_ep>
 24e:	a6 1b       	sub	r26, r22
 250:	b7 0b       	sbc	r27, r23

00000252 <__udivmodhi4_ep>:
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	5a 95       	dec	r21
 258:	a9 f7       	brne	.-22     	; 0x244 <__udivmodhi4_loop>
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
