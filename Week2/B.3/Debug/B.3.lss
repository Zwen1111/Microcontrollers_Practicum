
B.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000992  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087c  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000376  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000018ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fc  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__vector_2>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3b d0       	rcall	.+118    	; 0x13a <main>
  c4:	ab c0       	rjmp	.+342    	; 0x21c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	82 17       	cp	r24, r18
  e4:	93 07       	cpc	r25, r19
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <__vector_2>:
inputs:
outputs:
notes:			Lowers the index and prints the value on the 7 Segment display
Version :    	Zwen van Erkelens & Thijs Wijnen, Initial code
*******************************************************************/
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	vect1 = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <vect1+0x1>
 100:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <vect1>
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_3>:
inputs:
outputs:
notes:			Highers the index and prints the value on the 7 Segment display
Version :    	Zwen van Erkelens & Thijs Wijnen, Initial code
*******************************************************************/
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
	vect2 = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 128:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <main>:
outputs:	
notes:			
Version :    	Zwen van Erkelens & Thijs Wijnen, Initial code
*******************************************************************/
{
	DDRD = 0xF0;
 13a:	80 ef       	ldi	r24, 0xF0	; 240
 13c:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111111;					// PORTD all output 
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	84 bb       	out	0x14, r24	; 20
	
	// Set index to begin of pattern array
	index = 0;
 142:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <index+0x1>
 146:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <index>
	
	// Init Interrupt hardware
	EICRA |= 0x2C;			// INT2 falling edge, INT1 rising edge
 14a:	ea e6       	ldi	r30, 0x6A	; 106
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8c 62       	ori	r24, 0x2C	; 44
 152:	80 83       	st	Z, r24
	EIMSK |= 0x06;			// Enable INT2 & INT1
 154:	89 b7       	in	r24, 0x39	; 57
 156:	86 60       	ori	r24, 0x06	; 6
 158:	89 bf       	out	0x39, r24	; 57
	
	// Enable global interrupt system
	//SREG = 0x80;			// Of direct via SREG of via wrapper
	sei();
 15a:	78 94       	sei
	
	PORTC = pattern[index].data;
 15c:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <index>
 160:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <index+0x1>
 164:	e0 50       	subi	r30, 0x00	; 0
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	80 81       	ld	r24, Z
 16a:	85 bb       	out	0x15, r24	; 21
		}else if(vect2 == 1)
		{
			index++;
			if (index > 15 || index < 0)
			{
				PORTC = pattern[14].data;
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d1 e0       	ldi	r29, 0x01	; 1
	
	PORTC = pattern[index].data;
	
	while (1==1)
	{
		if (vect1 == 1 && vect2 == 1)
 170:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <vect1>
 174:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <vect1+0x1>
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	71 f5       	brne	.+92     	; 0x1d8 <main+0x9e>
 17c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 180:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	79 f4       	brne	.+30     	; 0x1a6 <main+0x6c>
		{
			index = 0;
 188:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <index+0x1>
 18c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <index>
			PORTC = pattern[index].data;
 190:	88 81       	ld	r24, Y
 192:	85 bb       	out	0x15, r24	; 21
			vect1 = 0;
 194:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <vect1+0x1>
 198:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <vect1>
			vect2 = 0;
 19c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 1a0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 1a4:	37 c0       	rjmp	.+110    	; 0x214 <main+0xda>
		}else if (vect1 == 1)
		{
			index--;
 1a6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <index>
 1aa:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <index+0x1>
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <index+0x1>
 1b4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <index>
			if (index > 15 || index < 0)
 1b8:	80 31       	cpi	r24, 0x10	; 16
 1ba:	91 05       	cpc	r25, r1
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <main+0x8a>
			{
				PORTC = pattern[14].data;
 1be:	8e 85       	ldd	r24, Y+14	; 0x0e
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <main+0x94>
				}else{
				PORTC = pattern[index].data;
 1c4:	fc 01       	movw	r30, r24
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	85 bb       	out	0x15, r24	; 21
			}
			vect1 = 0;
 1ce:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <vect1+0x1>
 1d2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <vect1>
 1d6:	1e c0       	rjmp	.+60     	; 0x214 <main+0xda>
		}else if(vect2 == 1)
 1d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1dc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	c1 f4       	brne	.+48     	; 0x214 <main+0xda>
		{
			index++;
 1e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <index>
 1e8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <index+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <index+0x1>
 1f2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <index>
			if (index > 15 || index < 0)
 1f6:	80 31       	cpi	r24, 0x10	; 16
 1f8:	91 05       	cpc	r25, r1
 1fa:	18 f0       	brcs	.+6      	; 0x202 <main+0xc8>
			{
				PORTC = pattern[14].data;
 1fc:	8e 85       	ldd	r24, Y+14	; 0x0e
 1fe:	85 bb       	out	0x15, r24	; 21
 200:	05 c0       	rjmp	.+10     	; 0x20c <main+0xd2>
				}else{
				PORTC = pattern[index].data;
 202:	fc 01       	movw	r30, r24
 204:	e0 50       	subi	r30, 0x00	; 0
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	80 81       	ld	r24, Z
 20a:	85 bb       	out	0x15, r24	; 21
			}
			vect2 = 0;
 20c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 210:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		}
		wait(200);
 214:	88 ec       	ldi	r24, 0xC8	; 200
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	57 df       	rcall	.-338    	; 0xc8 <wait>
	}
 21a:	aa cf       	rjmp	.-172    	; 0x170 <main+0x36>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
