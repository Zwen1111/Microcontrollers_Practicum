
B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000262  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7f  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d6  00000000  00000000  0000118f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000536  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000530  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000353  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	c5 c0       	rjmp	.+394    	; 0x1b0 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8d d0       	rcall	.+282    	; 0x1de <main>
  c4:	cc c0       	rjmp	.+408    	; 0x25e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <toggle_Lcd_E>:
  
  void display_text_int(char *str,int number)
  {
	  display_text(str);
	  display_int(number);
  }
  c8:	ab 9a       	sbi	0x15, 3	; 21
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <toggle_Lcd_E+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <toggle_Lcd_E+0xc>
  d4:	00 00       	nop
  d6:	ab 98       	cbi	0x15, 3	; 21
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <toggle_Lcd_E+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <toggle_Lcd_E+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <enable_Lcd_Rs>:
  e6:	aa 9a       	sbi	0x15, 2	; 21
  e8:	08 95       	ret

000000ea <unable_Lcd_Rs>:
  ea:	aa 98       	cbi	0x15, 2	; 21
  ec:	08 95       	ret

000000ee <lcd_write_data>:
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	f8 df       	rcall	.-16     	; 0xe6 <enable_Lcd_Rs>
  f6:	e8 df       	rcall	.-48     	; 0xc8 <toggle_Lcd_E>
  f8:	c2 95       	swap	r28
  fa:	c0 7f       	andi	r28, 0xF0	; 240
  fc:	c5 bb       	out	0x15, r28	; 21
  fe:	f3 df       	rcall	.-26     	; 0xe6 <enable_Lcd_Rs>
 100:	e3 df       	rcall	.-58     	; 0xc8 <toggle_Lcd_E>
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <lcd_command>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	ee df       	rcall	.-36     	; 0xea <unable_Lcd_Rs>
 10e:	dc df       	rcall	.-72     	; 0xc8 <toggle_Lcd_E>
 110:	c2 95       	swap	r28
 112:	c0 7f       	andi	r28, 0xF0	; 240
 114:	c5 bb       	out	0x15, r28	; 21
 116:	e9 df       	rcall	.-46     	; 0xea <unable_Lcd_Rs>
 118:	d7 df       	rcall	.-82     	; 0xc8 <toggle_Lcd_E>
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <display_text>:
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	29 f0       	breq	.+10     	; 0x134 <display_text+0x16>
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	e0 df       	rcall	.-64     	; 0xee <lcd_write_data>
 12e:	89 91       	ld	r24, Y+
 130:	81 11       	cpse	r24, r1
 132:	fc cf       	rjmp	.-8      	; 0x12c <display_text+0xe>
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <display_int>:
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	c7 5e       	subi	r28, 0xE7	; 231
 144:	d3 40       	sbci	r29, 0x03	; 3
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	be 01       	movw	r22, r28
 154:	6f 5f       	subi	r22, 0xFF	; 255
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	4f d0       	rcall	.+158    	; 0x1f8 <__itoa_ncheck>
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	df df       	rcall	.-66     	; 0x11e <display_text>
 160:	c9 51       	subi	r28, 0x19	; 25
 162:	dc 4f       	sbci	r29, 0xFC	; 252
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <display_clear>:

  void display_clear()
  {
	  lcd_command(0x01);	//clear display
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	c7 cf       	rjmp	.-114    	; 0x106 <lcd_command>
 178:	08 95       	ret

0000017a <init_Lcd_4_bit_mode>:
	  toggle_Lcd_E();
  }

  void init_Lcd_4_bit_mode(void)
  {
	  DDRC = 0b11111111;		//PORTC (7:0) output
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	84 bb       	out	0x14, r24	; 20
	  PORTC = 0x00;			//Maak alle pins van portc laag, ook e en rs
 17e:	15 ba       	out	0x15, r1	; 21

	  PORTC = 0x28;		//Function set (4-bit interface, 2 lines, 5*8 Pixels)
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	85 bb       	out	0x15, r24	; 21
	  //PORTC = 0x20;			//Function set (4-bit interface, 1 lines, 5*8 Pixels)
	  toggle_Lcd_E();
 184:	a1 df       	rcall	.-190    	; 0xc8 <toggle_Lcd_E>
	  
	  display_clear();
 186:	f6 df       	rcall	.-20     	; 0x174 <display_clear>
	  //lcd_command(0x0E);	//Zet display aan en cursor aan en maak cursor niet knipperent	(0x0E -> 0b00001110)
	  lcd_command(0x0C);		//Zet display aan en cursor uit en maak cursor niet knipperent		(0x0F -> 0b00001100)
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	bd df       	rcall	.-134    	; 0x106 <lcd_command>
	  lcd_command(0x06);		//Entry mode 06, van links naar rechts schrijven. cursor schuift mee
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	bb df       	rcall	.-138    	; 0x106 <lcd_command>
 190:	f1 cf       	rjmp	.-30     	; 0x174 <display_clear>
	  display_clear();
 192:	08 95       	ret

00000194 <set_cursor>:
 194:	80 58       	subi	r24, 0x80	; 128
 196:	b7 cf       	rjmp	.-146    	; 0x106 <lcd_command>
  }

  void set_cursor(int position)
  {
	  position += 128;
	  lcd_command(position);
 198:	08 95       	ret

0000019a <init>:

int count = 0;

void init(void)
{
	init_Lcd_4_bit_mode();
 19a:	ef df       	rcall	.-34     	; 0x17a <init_Lcd_4_bit_mode>
	 
	DDRD &= ~Bit(7); //portd7 op input
 19c:	8f 98       	cbi	0x11, 7	; 17
	 
	OCR2 = 3;
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= Bit(7);
 1a2:	87 b7       	in	r24, 0x37	; 55
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	87 bf       	out	0x37, r24	; 55
	sei();
 1a8:	78 94       	sei
	TCCR2 = 0b00011111;
 1aa:	8f e1       	ldi	r24, 0x1F	; 31
 1ac:	85 bd       	out	0x25, r24	; 37
 1ae:	08 95       	ret

000001b0 <__vector_9>:
}

ISR(TIMER2_COMP_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
	count++;
 1be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1c2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 1cc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <main>:

int main(void)
{
	init();
 1de:	dd df       	rcall	.-70     	; 0x19a <init>
	display_text("Counting: ");		//zet tekst op het display
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	9c df       	rcall	.-200    	; 0x11e <display_text>
	while (1)
	{
		set_cursor(10);
 1e6:	8a e0       	ldi	r24, 0x0A	; 10
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	d4 df       	rcall	.-88     	; 0x194 <set_cursor>
		display_int(count);
 1ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1f0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 1f4:	a2 df       	rcall	.-188    	; 0x13a <display_int>
 1f6:	f7 cf       	rjmp	.-18     	; 0x1e6 <main+0x8>

000001f8 <__itoa_ncheck>:
 1f8:	bb 27       	eor	r27, r27
 1fa:	4a 30       	cpi	r20, 0x0A	; 10
 1fc:	31 f4       	brne	.+12     	; 0x20a <__itoa_ncheck+0x12>
 1fe:	99 23       	and	r25, r25
 200:	22 f4       	brpl	.+8      	; 0x20a <__itoa_ncheck+0x12>
 202:	bd e2       	ldi	r27, 0x2D	; 45
 204:	90 95       	com	r25
 206:	81 95       	neg	r24
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	01 c0       	rjmp	.+2      	; 0x20e <__utoa_common>

0000020c <__utoa_ncheck>:
 20c:	bb 27       	eor	r27, r27

0000020e <__utoa_common>:
 20e:	fb 01       	movw	r30, r22
 210:	55 27       	eor	r21, r21
 212:	aa 27       	eor	r26, r26
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	aa 1f       	adc	r26, r26
 21a:	a4 17       	cp	r26, r20
 21c:	10 f0       	brcs	.+4      	; 0x222 <__utoa_common+0x14>
 21e:	a4 1b       	sub	r26, r20
 220:	83 95       	inc	r24
 222:	50 51       	subi	r21, 0x10	; 16
 224:	b9 f7       	brne	.-18     	; 0x214 <__utoa_common+0x6>
 226:	a0 5d       	subi	r26, 0xD0	; 208
 228:	aa 33       	cpi	r26, 0x3A	; 58
 22a:	08 f0       	brcs	.+2      	; 0x22e <__utoa_common+0x20>
 22c:	a9 5d       	subi	r26, 0xD9	; 217
 22e:	a1 93       	st	Z+, r26
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	79 f7       	brne	.-34     	; 0x212 <__utoa_common+0x4>
 234:	b1 11       	cpse	r27, r1
 236:	b1 93       	st	Z+, r27
 238:	11 92       	st	Z+, r1
 23a:	cb 01       	movw	r24, r22
 23c:	00 c0       	rjmp	.+0      	; 0x23e <strrev>

0000023e <strrev>:
 23e:	dc 01       	movw	r26, r24
 240:	fc 01       	movw	r30, r24
 242:	67 2f       	mov	r22, r23
 244:	71 91       	ld	r23, Z+
 246:	77 23       	and	r23, r23
 248:	e1 f7       	brne	.-8      	; 0x242 <strrev+0x4>
 24a:	32 97       	sbiw	r30, 0x02	; 2
 24c:	04 c0       	rjmp	.+8      	; 0x256 <strrev+0x18>
 24e:	7c 91       	ld	r23, X
 250:	6d 93       	st	X+, r22
 252:	70 83       	st	Z, r23
 254:	62 91       	ld	r22, -Z
 256:	ae 17       	cp	r26, r30
 258:	bf 07       	cpc	r27, r31
 25a:	c8 f3       	brcs	.-14     	; 0x24e <strrev+0x10>
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
