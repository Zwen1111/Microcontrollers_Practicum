
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000162  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d05  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000991  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000470  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001dec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000506  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030a  00000000  00000000  00002416  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4d d0       	rcall	.+154    	; 0x14e <main>
  b4:	54 c0       	rjmp	.+168    	; 0x15e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <toggle_Lcd_E>:
  
  void display_text_int(char *str,int number)
  {
	  display_text(str);
	  display_int(number);
  }
  b8:	ab 9a       	sbi	0x15, 3	; 21
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <toggle_Lcd_E+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <toggle_Lcd_E+0xc>
  c4:	00 00       	nop
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <toggle_Lcd_E+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <toggle_Lcd_E+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <enable_Lcd_Rs>:
  d6:	aa 9a       	sbi	0x15, 2	; 21
  d8:	08 95       	ret

000000da <unable_Lcd_Rs>:
  da:	aa 98       	cbi	0x15, 2	; 21
  dc:	08 95       	ret

000000de <lcd_write_data>:
  de:	cf 93       	push	r28
  e0:	c8 2f       	mov	r28, r24
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	f8 df       	rcall	.-16     	; 0xd6 <enable_Lcd_Rs>
  e6:	e8 df       	rcall	.-48     	; 0xb8 <toggle_Lcd_E>
  e8:	c2 95       	swap	r28
  ea:	c0 7f       	andi	r28, 0xF0	; 240
  ec:	c5 bb       	out	0x15, r28	; 21
  ee:	f3 df       	rcall	.-26     	; 0xd6 <enable_Lcd_Rs>
  f0:	e3 df       	rcall	.-58     	; 0xb8 <toggle_Lcd_E>
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <lcd_command>:
  f6:	cf 93       	push	r28
  f8:	c8 2f       	mov	r28, r24
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	ee df       	rcall	.-36     	; 0xda <unable_Lcd_Rs>
  fe:	dc df       	rcall	.-72     	; 0xb8 <toggle_Lcd_E>
 100:	c2 95       	swap	r28
 102:	c0 7f       	andi	r28, 0xF0	; 240
 104:	c5 bb       	out	0x15, r28	; 21
 106:	e9 df       	rcall	.-46     	; 0xda <unable_Lcd_Rs>
 108:	d7 df       	rcall	.-82     	; 0xb8 <toggle_Lcd_E>
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <display_text>:
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ec 01       	movw	r28, r24
 114:	88 81       	ld	r24, Y
 116:	88 23       	and	r24, r24
 118:	29 f0       	breq	.+10     	; 0x124 <display_text+0x16>
 11a:	21 96       	adiw	r28, 0x01	; 1
 11c:	e0 df       	rcall	.-64     	; 0xde <lcd_write_data>
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	fc cf       	rjmp	.-8      	; 0x11c <display_text+0xe>
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <display_clear>:

  void display_clear()
  {
	  lcd_command(0x01);	//clear display
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	e4 cf       	rjmp	.-56     	; 0xf6 <lcd_command>
 12e:	08 95       	ret

00000130 <init_Lcd_4_bit_mode>:
	  toggle_Lcd_E();
  }

  void init_Lcd_4_bit_mode(void)
  {
	  DDRC = 0b11111111;	//PORTC (7:0) output
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	84 bb       	out	0x14, r24	; 20
	  PORTC = 0x00;		//Maak alle pins van portc laag, ook e en rs
 134:	15 ba       	out	0x15, r1	; 21

	  //PORTC = 0x28;		//Function set (4-bit interface, 2 lines, 5*8 Pixels)
	  PORTC = 0x20;		//Function set (4-bit interface, 1 lines, 5*8 Pixels)
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	85 bb       	out	0x15, r24	; 21
	  toggle_Lcd_E();
 13a:	be df       	rcall	.-132    	; 0xb8 <toggle_Lcd_E>
	  
	  //lcd_command(0x0E);	//Zet display aan en cursor aan en maak cursor niet knipperent	(0x0E -> 0b00001110)
	  lcd_command(0x0C);	//Zet display aan en cursor uit en maak cursor niet knipperent		(0x0F -> 0b00001100)
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	db df       	rcall	.-74     	; 0xf6 <lcd_command>
	  lcd_command(0x06);	//Entry mode 06, van links naar rechts schrijven. cursor schuift mee
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	d9 df       	rcall	.-78     	; 0xf6 <lcd_command>
	  display_clear();
 144:	f2 cf       	rjmp	.-28     	; 0x12a <display_clear>
 146:	08 95       	ret

00000148 <set_cursor>:
 148:	80 58       	subi	r24, 0x80	; 128
	  //{
	  //position -= 15;
	  //position += 64;
	  //}
	  position += 128;
	  lcd_command(position);
 14a:	d5 cf       	rjmp	.-86     	; 0xf6 <lcd_command>
 14c:	08 95       	ret

0000014e <main>:
#include "Lcd.h"


 int main(void)
 {
	 init_Lcd_4_bit_mode();
 14e:	f0 df       	rcall	.-32     	; 0x130 <init_Lcd_4_bit_mode>
	 display_text("Are you a yedi?");
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	dc df       	rcall	.-72     	; 0x10e <display_text>
	 set_cursor(15);
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	f6 df       	rcall	.-20     	; 0x148 <set_cursor>
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0xe>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
