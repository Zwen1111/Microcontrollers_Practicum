
B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000955  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000338  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000135  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	52 c0       	rjmp	.+164    	; 0xca <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	5e d0       	rcall	.+188    	; 0x166 <main>
  aa:	5f c0       	rjmp	.+190    	; 0x16a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ToggleD7>:
	}
}

void ToggleD7(void)
{
	PORTD ^= Bit(7);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	80 58       	subi	r24, 0x80	; 128
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	08 95       	ret

000000b6 <init>:
}

void init(void)
{
	DDRD |= Bit(7);
  b6:	8f 9a       	sbi	0x11, 7	; 17

	OCR2 = 250;
  b8:	8a ef       	ldi	r24, 0xFA	; 250
  ba:	83 bd       	out	0x23, r24	; 35
	TIMSK |= Bit(7);
  bc:	87 b7       	in	r24, 0x37	; 55
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	87 bf       	out	0x37, r24	; 55
	sei();
  c2:	78 94       	sei
	TCCR2 = 0b00001101;
  c4:	8d e0       	ldi	r24, 0x0D	; 13
  c6:	85 bd       	out	0x25, r24	; 37
  c8:	08 95       	ret

000000ca <__vector_9>:
}

ISR(TIMER2_COMP_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	0b b6       	in	r0, 0x3b	; 59
  d6:	0f 92       	push	r0
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	ms++;
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ms>
  f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ms+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ms+0x1>
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ms>
	if(onoff && ms == 15)
 102:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 106:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 10a:	23 2b       	or	r18, r19
 10c:	61 f0       	breq	.+24     	; 0x126 <__vector_9+0x5c>
 10e:	0f 97       	sbiw	r24, 0x0f	; 15
 110:	b9 f4       	brne	.+46     	; 0x140 <__vector_9+0x76>
	{
		onoff = 0;
 112:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 116:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		ms = 0;
 11a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ms+0x1>
 11e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ms>
		ToggleD7();
 122:	c5 df       	rcall	.-118    	; 0xae <ToggleD7>
 124:	0d c0       	rjmp	.+26     	; 0x140 <__vector_9+0x76>
	}
	else if(!onoff && ms == 25)
 126:	49 97       	sbiw	r24, 0x19	; 25
 128:	59 f4       	brne	.+22     	; 0x140 <__vector_9+0x76>
	{
		onoff = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		ms = 0;
 136:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ms+0x1>
 13a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ms>
		ToggleD7();
 13e:	b7 df       	rcall	.-146    	; 0xae <ToggleD7>
	}
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	3f 91       	pop	r19
 156:	2f 91       	pop	r18
 158:	0f 90       	pop	r0
 15a:	0b be       	out	0x3b, r0	; 59
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <main>:

int main(void)
{
	init();
 166:	a7 df       	rcall	.-178    	; 0xb6 <init>
 168:	ff cf       	rjmp	.-2      	; 0x168 <main+0x2>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
